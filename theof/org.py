#!/usr/bin/python3
# -*- coding: utf-8 -*-

#
# Process (extract, filter, merge) Vossantos in an org mode file.
#
# Usage: Without any arguments, extracts all Vossanto canidates from
# the given org file.
#
# Author: rja
#
# Changes:
# 2017-05-14 (rja)
# - added options for selection
# 2017-05-13 (rja)
# - renamed from mergeorg.py and extended for extraction and filtering
# - migrated to Python3
# 2017-05-11 (rja)
# - initial version

import re
import argparse
import sys
from collections import OrderedDict

version = "0.0.2"

# 1. [[https://www.wikidata.org/wiki/Q83484][Anthony Quinn]] (1987/01/02/0000232) ''I sometimes feel like *the Anthony Quinn of* my set.''
re_line = re.compile(r"^(> )?[0-9]+\.[ !]+\+?\[\[.+/([^/]+)\]\[(.+)\]\] \((([0-9]{4})/([0-9]{2})/([0-9]{2})/([0-9]+))\) (.+[^+])(\+)?$")

# to remove markup from the sentences
re_clean = re.compile(r"[*.]")

# reads the file into which the other file shall be merged
# all non-vossanto lines are returned in lines,
# all following (vossanto) lines are indexed in index using
# a key generated by match_line
def read_file(fname):
    lines = []
    index = None
    for line in gen_lines(fname):
        # different handling for lines before and after the heading
        if line.startswith("* results"):
            index = dict()
            lines.append(line)
        else:
            if index is not None:
                # index lines after heading "* results"
                parts = match_line(line)
                if parts:
                    year, key = get_key(parts)
                    if year not in index:
                        index[year] = dict()
                    index[year][key] = line
            else:
                # store lines before heading "* results"
                lines.append(line)
    return lines, index

def gen_truefalse(candidates, true_positive, false_positive):
    for year, aid, fid, sourceId, sourceLabel, sentence, trueVoss, newVoss in candidates:
        if true_positive == false_positive or true_positive == trueVoss or false_positive != trueVoss:
            yield year, aid, fid, sourceId, sourceLabel, sentence, trueVoss, newVoss


# read the lines of a file
def gen_lines(fname):
    with open(fname, "r", encoding="utf-8") as f:
        for line in f:
            yield line

def gen_candidates(lines):
    for line in lines:
        parts = match_line(line)
        if parts:
            yield parts

# generates a key for a Vossanto
def get_key(parts):
    year, aid, fid, sourceId, sourceLabel, sentence, trueVoss, newVoss = parts
    key = "|".join([year, aid, sourceLabel, re_clean.sub('', sentence)[:40]])
    return year, key

def select_parts(parts, syear, said, sfid, ssourceId, ssourceLabel, stext):
    if any([syear, said, sfid, ssourceId, ssourceLabel, stext]):
        for year, aid, fid, sourceId, sourceLabel, sentence, trueVoss, newVoss in parts:
            result = []
            if syear:
                result.append(year)
            if said:
                result.append(aid)
            if sfid:
                result.append(fid)
            if ssourceId:
                result.append(sourceId)
            if ssourceLabel:
                result.append(sourceLabel)
            if stext:
                result.append(sentence)
            yield result
    else:
        # when nothing has been selected, return everything
        for part in parts:
            yield part

# checks if the line is a Vossanto line
def match_line(line):
    # detect the Vossanto lines
    match = re_line.match(line.strip())
    if match:
        newVoss = match.group(1)
        sourceId = match.group(2)
        sourceLabel = match.group(3)
        fid = match.group(4)
        year = match.group(5)
        aid = match.group(8)
        sentence = match.group(9)
        trueVoss = match.group(10) != "+"
        return year, aid, fid, sourceId, sourceLabel, sentence, trueVoss, newVoss
    return None

# inserts a vossanto line into the index
def insert(index, line, string_new = '> '):
    # extract key for this line
    parts = match_line(line)
    if not parts:
        # print warning only if not a year heading
        if not re.match("^\*{2,3} [0-9]{4}$", line.strip()):
            print("WARN: line did not match", line[:50], file=sys.stderr)
        return
    # add new Vossanto
    year, key = get_key(parts)
    if key not in index[year]:
        index[year][key] = string_new + line

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Merge Vossantos in org files.', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('file', type=str, help='org mode file to process')
    # what shall be printed
    parser.add_argument('-y', '--year', action="store_true", help="output year")
    parser.add_argument('-a', '--articleid', action="store_true", help="output article id")
    parser.add_argument('-f', '--fileid', action="store_true", help="output file id")
    parser.add_argument('-i', '--sourceid', action="store_true", help="output Wikidata source id")
    parser.add_argument('-l', '--sourcelabel', action="store_true", help="output source")
    parser.add_argument('-t', '--text', action="store_true", help="output text")
    # other options
    parser.add_argument('-m', '--merge', type=str, metavar="FILE", help='file to merge')
    parser.add_argument('-n', '--new', type=str, metavar="S", help="string to mark new entries", default='> ')
    parser.add_argument('-T', '--true', action="store_true", help="output only true Vossantos")
    parser.add_argument('-F', '--false', action="store_true", help="output only false Vossantos")    
    parser.add_argument('-s', '--separator', type=str, metavar="SEP", help="output separator", default='\t')
    parser.add_argument('-v', '--version', action="version", version="%(prog)s " + version)

    args = parser.parse_args()

    if args.merge:
        # read file into which the other file shall be merged
        lines, index = read_file(args.file)

        # read new file and insert Vossantos
        for line in gen_lines(args.merge):
            insert(index, line, args.string_new)
        # print first (unchanged) part of original file
        for line in lines:
            print(line, end='')

        # print Vossanto lines
        for year in sorted(index):
            print()
            print("**", year)
            for line in sorted(index[year]):
                print(index[year][line], end='')
    else:
        # default: extract Vossntos
        lines = gen_lines(args.file)
        parts = gen_candidates(lines)        
        parts = gen_truefalse(parts, args.true, args.false)
        parts = select_parts(parts, args.year, args.articleid, args.fileid, args.sourceid, args.sourcelabel, args.text)
        for part in parts:
            print(args.separator.join([str(p) for p in part]))
