
#+TITLE:
#+AUTHOR:
#+EMAIL: michel.schwab@hu-berlin.de
#+DATE: Oktober 24, 2019
#+KEYWORDS:
#+DESCRIPTION:
#+TAGS:
#+LANGUAGE: en
#+OPTIONS: toc:nil ':t H:5
#+STARTUP: hidestars overview
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper,11pt]
#+latex_header: \usepackage[margin=2cm]{geometry}
#+PANDOC_OPTIONS:

* "A Buster Keaton of Linguistics": First Automated Approaches for the Extraction of Vossian Antonomasia
- Authors: Michel Schwab, Robert Jäschke, Frank Fischer, Jannik Strötgen
- Contact: michel.schwab@hu-berlin.de
** Corpus 

** Identification of source candidates (using regex)
1. Extract sentences that contain the pattern described in the paper
#+BEGIN_SRC sh
python theof.py nyt_corpus_${year}.tar.gz -r 1
#+END_SRC

The input files are gzipped TAR files for each year, containing the XML files (one for each article).

2. Removing duplicates
#+BEGIN_SRC sh
python clean.py 
#+END_SRC

** Approaches
*** Baseline
    
*** WD
wikidata entity matching
1. Entity matching and linking
#+BEGIN_SRC sh
 python check_wikidata.py theof_${year}.tsv wikidata_humans.tsv > pattern_${year}_wd.tsv
#+END_SRC
2. Popularity filter
#+BEGIN_SRC sh
 python wd1_filter.py pattern_${year}_wd.tsv wikidata_humans.tsv wikidata_with_sitelinks wikidata_with_aliases 
#+END_SRC
3. Filter 
#+BEGIN_SRC sh
 python wd2_filter.py pattern_${year}_wd_wd1.tsv wikidata_entities_among_for_of.tsv  
#+END_SRC

*** NER
1. Stanford named entity recognition tagger
#+BEGIN_SRC sh
 python ner.py 
#+END_SRC
2. Filter (same filter as Step 3. in WD approach)
#+BEGIN_SRC sh
 python wd_filter_for_ner.py pattern_ner.tsv
#+END_SRC

*** BLSTM
 1. Train a bidirectional LSTM neural network
#+BEGIN_SRC sh
 python lstm.py 
#+END_SRC

** Results and Statistics


** Python Source Code
- ~theof.py~: implements Step 1
- ~check_wikidata.py~: implements WD approach 
- ~wd1_filter.py~: implements WD approach, first WD filter (based on sitelinks)
- ~wd2_filter.py~: implements WD approach, second WD filter
- ~ner.py~: implements NER approach
- ~wd_filter_for_ner.py~: implements filter for NER approach
- ~lstm.py~: implements BLSTM approach
  
** Data
